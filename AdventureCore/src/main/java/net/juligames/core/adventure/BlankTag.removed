package net.juligames.core.adventure;

import de.bentzin.tools.pair.Pair;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.PatternReplacementResult;
import net.kyori.adventure.text.TextReplacementConfig;
import net.kyori.adventure.text.minimessage.internal.parser.Token;
import net.kyori.adventure.text.minimessage.internal.parser.TokenType;
import net.kyori.adventure.text.minimessage.internal.parser.node.CheatNode;
import net.kyori.adventure.text.minimessage.internal.parser.node.ElementNode;
import net.kyori.adventure.text.minimessage.internal.parser.node.TagNode;
import net.kyori.adventure.text.minimessage.internal.parser.node.TextNode;
import net.kyori.adventure.text.minimessage.internal.parser.node.ValueNode;
import net.kyori.adventure.text.minimessage.tag.Modifying;
import net.kyori.adventure.text.minimessage.tree.Node;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.jetbrains.annotations.NotNull;

import java.util.Collection;
import java.util.HashSet;
import java.util.StringJoiner;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

/**
 * @author Ture Bentzin
 * 04.02.2023
 */
public class BlankTag implements Modifying {

    private Collection<Pair<Integer>> ranges = new HashSet<>();
    private int memory = 0;

    @Override
    public void visit(@NotNull Node current, int depth) {

        if(current instanceof ElementNode elementNode) {
            System.out.println(elementNode.token().toString() + " " + elementNode.sourceMessage());
        }
        if(current instanceof TagNode tagNode)
        {

            if(tagNode.tag() instanceof BlankTag blankTag) {
                //it's my tag!
                StringJoiner joiner = new StringJoiner("");

                tagNode.children().forEach(elementNode -> {
                    if(elementNode instanceof TextNode textNode) {
                        joiner.add(textNode.value());
                    }
                });

                tagNode.unsafeChildren().clear();
                Token token = tagNode.token();
                tagNode.addChild(new CheatNode(tagNode,token,tagNode.sourceMessage(),joiner.toString()));
                System.out.println(joiner);
            }
        }
    }

    @Override
    public Component apply(@NotNull Component current, int depth) {
        return current;
    }
}
